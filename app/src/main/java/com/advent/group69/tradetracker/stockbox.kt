package com.advent.group69.tradetracker

import android.os.Parcelable
import android.os.Parcel
import android.arch.persistence.room.*

/**
 * @todo The arrayOfNulls was generated by boilerplate. It might be better to have default values.
 */

@Entity(tableName="TableView2")
data class Stock(@PrimaryKey @ColumnInfo(name="_stockid") var stockid: Long = 1337,
                 var ticker: String = "BABA",
                 var target: Double = 4.20,
                 var percent: Double = -1.0,
                 var stopLossPercent: Double = -1.0,
                 var activationPrice: Double = -1.0, //this becomes -2.0 to signify the activation price has been met
                 var highestPrice: Double = -1.0,
                 @ColumnInfo(name="ab") var above: Long = 1,
                 var phone: Long = 0,
                 var crypto: Long = 0) : Parcelable {

    /**
     * Overloaded constructor for better interoperability with UI radiobuttons
     * @param[aboveB] takes boolean and converts it to long equivalent
     * @param[phoneB] takes boolean and converts it to long equivalent
     * @param[crypto] takes boolean and converts it to long equivalent
     */
    constructor(_stockid: Long = 1337, _ticker: String = "BABA", _target: Double = 4.20, _percent: Double, _stopLossPercent: Double,
                _activationPrice: Double, _highestPrice: Double, aboveB: Boolean = true, phoneB: Boolean = false, crypto: Boolean = false) :
            this(_stockid, _ticker, _target, _percent, _stopLossPercent, _activationPrice, _highestPrice,
                    when (aboveB) { true -> {1L} false -> {0L} },
                    when (phoneB) { true -> {1L} false -> {0L} },
                    when (crypto) { true -> {1L} false -> {0L} }
            )

    fun ContentValues(): android.content.ContentValues {
        val con = android.content.ContentValues()
        con.put("_stockid", this.stockid)
        con.put("ticker", this.ticker)
        con.put("target", this.target)
        con.put("ab", this.above)
        con.put("phone", this.phone)
        con.put("crypto", this.crypto)
        return con
    }


    constructor(source: Parcel) : this(
            source.readLong(),
            source.readString(),
            source.readDouble(),
            source.readDouble(),
            source.readDouble(),
            source.readDouble(),
            source.readDouble(),
            source.readLong(),
            source.readLong(),
            source.readLong()
    )

    override fun describeContents() = 0

    override fun writeToParcel(dest: Parcel, flags: Int) = with(dest) {
        writeLong(stockid)
        writeString(ticker)
        writeDouble(target)
        writeDouble(percent)
        writeDouble(stopLossPercent)
        writeDouble(activationPrice)
        writeDouble(highestPrice)
        writeLong(above)
        writeLong(phone)
        writeLong(crypto)
    }

    companion object {
        @JvmField
        val CREATOR: Parcelable.Creator<Stock> = object : Parcelable.Creator<Stock> {
            override fun createFromParcel(source: Parcel): Stock = Stock(source)
            override fun newArray(size: Int): Array<Stock?> = arrayOfNulls(size)
        }
    }
}